// GraphQL Queries for Kalpla Platform

export const GET_USER = `
  query GetUser($id: ID!) {
    getUser(id: $id) {
      id
      email
      firstName
      lastName
      role
      status
      profilePicture
      bio
      createdAt
      updatedAt
    }
  }
`;

export const LIST_USERS = `
  query ListUsers($filter: ModelUserFilterInput, $limit: Int, $nextToken: String) {
    listUsers(filter: $filter, limit: $limit, nextToken: $nextToken) {
      items {
        id
        email
        firstName
        lastName
        role
        profilePicture
        bio
        createdAt
        updatedAt
      }
      nextToken
    }
  }
`;

export const GET_COURSE = `
  query GetCourse($id: ID!) {
    getCourse(id: $id) {
      id
      title
      description
      instructorId
      instructor {
        id
        firstName
        lastName
        profilePicture
      }
      status
      price
      thumbnail
      createdAt
      updatedAt
      sections {
        items {
          id
          title
          description
          order
          lessons {
            items {
              id
              title
              description
              duration
              order
              videoUrl
            }
          }
        }
      }
    }
  }
`;

export const LIST_COURSES = `
  query ListCourses($filter: ModelCourseFilterInput, $limit: Int, $nextToken: String) {
    listCourses(filter: $filter, limit: $limit, nextToken: $nextToken) {
      items {
        id
        title
        description
        instructorId
        instructor {
          id
          firstName
          lastName
          profilePicture
        }
        status
        price
        thumbnail
        createdAt
        updatedAt
      }
      nextToken
    }
  }
`;

export const GET_LESSON = `
  query GetLesson($id: ID!) {
    getLesson(id: $id) {
      id
      title
      description
      courseId
      sectionId
      videoUrl
      duration
      order
      interactiveElements
      createdAt
      updatedAt
    }
  }
`;

export const LIST_LESSONS = `
  query ListLessons($filter: ModelLessonFilterInput, $limit: Int, $nextToken: String) {
    listLessons(filter: $filter, limit: $limit, nextToken: $nextToken) {
      items {
        id
        title
        description
        courseId
        sectionId
        videoUrl
        duration
        order
        interactiveElements
        createdAt
        updatedAt
      }
      nextToken
    }
  }
`;

export const GET_COURSE_SECTION = `
  query GetCourseSection($id: ID!) {
    getCourseSection(id: $id) {
      id
      title
      description
      courseId
      order
      createdAt
      updatedAt
      lessons {
        items {
          id
          title
          description
          duration
          order
          videoUrl
        }
      }
    }
  }
`;

export const LIST_COURSE_SECTIONS = `
  query ListCourseSections($filter: ModelCourseSectionFilterInput, $limit: Int, $nextToken: String) {
    listCourseSections(filter: $filter, limit: $limit, nextToken: $nextToken) {
      items {
        id
        title
        description
        courseId
        order
        createdAt
        updatedAt
      }
      nextToken
    }
  }
`;

export const GET_COURSE_ENROLLMENT = `
  query GetCourseEnrollment($id: ID!) {
    getCourseEnrollment(id: $id) {
      id
      userId
      courseId
      course {
        id
        title
        description
        instructor {
          id
          firstName
          lastName
        }
      }
      status
      enrolledAt
      completedAt
      createdAt
      updatedAt
    }
  }
`;

export const LIST_COURSE_ENROLLMENTS = `
  query ListCourseEnrollments($filter: ModelCourseEnrollmentFilterInput, $limit: Int, $nextToken: String) {
    listCourseEnrollments(filter: $filter, limit: $limit, nextToken: $nextToken) {
      items {
        id
        userId
        courseId
        course {
          id
          title
          description
        }
        status
        enrolledAt
        completedAt
        createdAt
        updatedAt
      }
      nextToken
    }
  }
`;

export const GET_STUDENT_PROGRESS = `
  query GetStudentProgress($id: ID!) {
    getStudentProgress(id: $id) {
      id
      userId
      courseId
      lessonId
      lesson {
        id
        title
        duration
      }
      progress
      completed
      lastWatchedAt
      createdAt
      updatedAt
    }
  }
`;

export const LIST_STUDENT_PROGRESS = `
  query ListStudentProgress($filter: ModelStudentProgressFilterInput, $limit: Int, $nextToken: String) {
    listStudentProgress(filter: $filter, limit: $limit, nextToken: $nextToken) {
      items {
        id
        userId
        courseId
        lessonId
        lesson {
          id
          title
          duration
        }
        progress
        completed
        lastWatchedAt
        createdAt
        updatedAt
      }
      nextToken
    }
  }
`;

export const GET_PAYMENT = `
  query GetPayment($id: ID!) {
    getPayment(id: $id) {
      id
      userId
      courseId
      course {
        id
        title
      }
      amount
      currency
      status
      paymentMethod
      transactionId
      createdAt
      updatedAt
    }
  }
`;

export const LIST_PAYMENTS = `
  query ListPayments($filter: ModelPaymentFilterInput, $limit: Int, $nextToken: String) {
    listPayments(filter: $filter, limit: $limit, nextToken: $nextToken) {
      items {
        id
        userId
        courseId
        course {
          id
          title
        }
        amount
        currency
        status
        paymentMethod
        transactionId
        createdAt
        updatedAt
      }
      nextToken
    }
  }
`;

export const GET_MENTOR_APPLICATION = `
  query GetMentorApplication($id: ID!) {
    getMentorApplication(id: $id) {
      id
      userId
      user {
        id
        firstName
        lastName
        email
      }
      status
      submittedAt
      reviewedAt
      createdAt
      updatedAt
    }
  }
`;

export const LIST_MENTOR_APPLICATIONS = `
  query ListMentorApplications($filter: ModelMentorApplicationFilterInput, $limit: Int, $nextToken: String) {
    listMentorApplications(filter: $filter, limit: $limit, nextToken: $nextToken) {
      items {
        id
        userId
        user {
          id
          firstName
          lastName
          email
        }
        status
        submittedAt
        reviewedAt
        createdAt
        updatedAt
      }
      nextToken
    }
  }
`;

// Video-related queries
export const GET_VIDEO_PROGRESS = `
  query GetVideoProgress($userId: ID!, $lessonId: ID!) {
    getVideoProgress(userId: $userId, lessonId: $lessonId) {
      id
      userId
      lessonId
      progress
      completed
      lastWatchedAt
      createdAt
      updatedAt
    }
  }
`;

export const GET_VIDEO_ANALYTICS = `
  query GetVideoAnalytics($lessonId: ID!) {
    getVideoAnalytics(lessonId: $lessonId) {
      id
      lessonId
      totalViews
      averageWatchTime
      completionRate
      dropOffPoints
      createdAt
      updatedAt
    }
  }
`;

// Analytics queries
export const GET_COURSE_METRICS = `
  query GetCourseMetrics($courseId: ID!) {
    getCourseMetrics(courseId: $courseId) {
      id
      courseId
      totalEnrollments
      completionRate
      averageRating
      revenue
      createdAt
      updatedAt
    }
  }
`;

export const LIST_COURSE_METRICS = `
  query ListCourseMetrics($filter: ModelCourseMetricsFilterInput, $limit: Int, $nextToken: String) {
    listCourseMetrics(filter: $filter, limit: $limit, nextToken: $nextToken) {
      items {
        id
        courseId
        course {
          id
          title
        }
        totalEnrollments
        completionRate
        averageRating
        revenue
        createdAt
        updatedAt
      }
      nextToken
    }
  }
`;

export const GET_REVENUE_ANALYTICS = `
  query GetRevenueAnalytics($date: String!) {
    getRevenueAnalytics(date: $date) {
      id
      date
      totalRevenue
      courseRevenue
      subscriptionRevenue
      createdAt
      updatedAt
    }
  }
`;

export const LIST_REVENUE_ANALYTICS = `
  query ListRevenueAnalytics($filter: ModelRevenueAnalyticsFilterInput, $limit: Int, $nextToken: String) {
    listRevenueAnalytics(filter: $filter, limit: $limit, nextToken: $nextToken) {
      items {
        id
        date
        totalRevenue
        courseRevenue
        subscriptionRevenue
        createdAt
        updatedAt
      }
      nextToken
    }
  }
`;

export const GET_STUDENT_ANALYTICS = `
  query GetStudentAnalytics($userId: ID!) {
    getStudentAnalytics(userId: $userId) {
      id
      userId
      user {
        id
        firstName
        lastName
      }
      totalCoursesEnrolled
      totalCoursesCompleted
      totalHoursWatched
      averageRating
      createdAt
      updatedAt
    }
  }
`;

export const LIST_STUDENT_ANALYTICS = `
  query ListStudentAnalytics($filter: ModelStudentAnalyticsFilterInput, $limit: Int, $nextToken: String) {
    listStudentAnalytics(filter: $filter, limit: $limit, nextToken: $nextToken) {
      items {
        id
        userId
        user {
          id
          firstName
          lastName
        }
        totalCoursesEnrolled
        totalCoursesCompleted
        totalHoursWatched
        averageRating
        createdAt
        updatedAt
      }
      nextToken
    }
  }
`;

// Notes System Queries
export const GET_NOTES_BY_LESSON = `
  query GetNotesByLesson($lessonId: ID!, $studentId: ID!) {
    getNotesByLesson(lessonId: $lessonId, studentId: $studentId) {
      items {
        id
        studentId
        lessonId
        content
        timestamp
        createdAt
        updatedAt
      }
    }
  }
`;

export const LIST_NOTES = `
  query ListNotes($filter: ModelNoteFilterInput, $limit: Int, $nextToken: String) {
    listNotes(filter: $filter, limit: $limit, nextToken: $nextToken) {
      items {
        id
        studentId
        lessonId
        content
        timestamp
        createdAt
        updatedAt
      }
      nextToken
    }
  }
`;

// Q&A System Queries
export const GET_QUESTIONS_BY_LESSON = `
  query GetQuestionsByLesson($lessonId: ID!) {
    getQuestionsByLesson(lessonId: $lessonId) {
      items {
        id
        studentId
        lessonId
        question
        status
        answers {
          items {
            id
            mentorId
            answer
            createdAt
          }
        }
        createdAt
        updatedAt
      }
    }
  }
`;

export const GET_QUESTIONS_BY_STUDENT = `
  query GetQuestionsByStudent($studentId: ID!) {
    getQuestionsByStudent(studentId: $studentId) {
      items {
        id
        lessonId
        question
        status
        answers {
          items {
            id
            mentorId
            answer
            createdAt
          }
        }
        createdAt
        updatedAt
      }
    }
  }
`;

export const GET_PENDING_QUESTIONS = `
  query GetPendingQuestions($mentorId: ID!) {
    getPendingQuestions(mentorId: $mentorId) {
      items {
        id
        studentId
        lessonId
        question
        status
        createdAt
        updatedAt
      }
    }
  }
`;

// Discussion Forum Queries
export const GET_DISCUSSIONS_BY_LESSON = `
  query GetDiscussionsByLesson($lessonId: ID!) {
    getDiscussionsByLesson(lessonId: $lessonId) {
      items {
        id
        studentId
        lessonId
        title
        content
        likes
        replies {
          items {
            id
            userId
            content
            createdAt
          }
        }
        createdAt
        updatedAt
      }
    }
  }
`;

export const GET_DISCUSSION_REPLIES = `
  query GetDiscussionReplies($discussionId: ID!) {
    getDiscussionReplies(discussionId: $discussionId) {
      items {
        id
        discussionId
        userId
        content
        createdAt
        updatedAt
      }
    }
  }
`;

// Assignment System Queries
export const GET_ASSIGNMENTS_BY_COURSE = `
  query GetAssignmentsByCourse($courseId: ID!) {
    getAssignmentsByCourse(courseId: $courseId) {
      items {
        id
        courseId
        title
        description
        instructions
        dueDate
        maxPoints
        submissionTypes
        resources
        createdAt
        updatedAt
      }
    }
  }
`;

export const GET_SUBMISSIONS_BY_USER = `
  query GetSubmissionsByUser($userId: ID!) {
    getSubmissionsByUser(userId: $userId) {
      items {
        id
        assignmentId
        assignment {
          id
          title
          courseId
          course {
            id
            title
          }
        }
        textSubmission
        fileSubmission
        linkSubmission
        status
        grade
        feedback
        submittedAt
        gradedAt
        createdAt
        updatedAt
      }
    }
  }
`;

export const GET_SUBMISSIONS_BY_ASSIGNMENT = `
  query GetSubmissionsByAssignment($assignmentId: ID!) {
    getSubmissionsByAssignment(assignmentId: $assignmentId) {
      items {
        id
        userId
        user {
          id
          firstName
          lastName
        }
        textSubmission
        fileSubmission
        linkSubmission
        status
        grade
        feedback
        submittedAt
        gradedAt
        createdAt
        updatedAt
      }
    }
  }
`;

export const GET_PENDING_SUBMISSIONS = `
  query GetPendingSubmissions($mentorId: ID!) {
    getPendingSubmissions(mentorId: $mentorId) {
      items {
        id
        assignmentId
        assignment {
          id
          title
          courseId
          course {
            id
            title
          }
        }
        userId
        user {
          id
          firstName
          lastName
        }
        textSubmission
        fileSubmission
        linkSubmission
        status
        submittedAt
        createdAt
        updatedAt
      }
    }
  }
`;

// Profile Queries
export const GET_USER_PROFILE = `
  query GetUserProfile($id: ID!) {
    getUser(id: $id) {
      id
      email
      firstName
      lastName
      role
      profilePicture
      bio
      createdAt
      updatedAt
    }
  }
`;

export const GET_STUDENT_PROFILE = `
  query GetStudentProfile($userId: ID!) {
    getStudentProfile(userId: $userId) {
      id
      userId
      bio
      interests
      goals
      currentPhase
      education
      experience
      skills
      totalCoursesCompleted
      totalHoursWatched
      averageGrade
      createdAt
      updatedAt
    }
  }
`;

export const GET_MENTOR_PROFILE = `
  query GetMentorProfile($userId: ID!) {
    getMentorProfile(userId: $userId) {
      id
      userId
      bio
      expertise
      experience
      education
      certifications
      portfolio
      linkedinProfile
      website
      assignedPhases
      maxStudentsPerPhase
      status
      createdAt
      updatedAt
    }
  }
`;

// Transcript Queries
export const GET_TRANSCRIPT = `
  query GetTranscript($studentId: ID!) {
    getTranscript(studentId: $studentId) {
      id
      studentId
      transcriptUrl
      generatedAt
      createdAt
    }
  }
`;

export const LIST_TRANSCRIPTS = `
  query ListTranscripts($filter: ModelTranscriptFilterInput, $limit: Int, $nextToken: String) {
    listTranscripts(filter: $filter, limit: $limit, nextToken: $nextToken) {
      items {
        id
        studentId
        transcriptUrl
        generatedAt
        createdAt
      }
      nextToken
    }
  }
`;

// Application Queries
export const GET_KSMP_APPLICATION = `
  query GetKSMPApplication($id: ID!) {
    getKSMPApplication(id: $id) {
      id
      userId
      user {
        id
        firstName
        lastName
        email
      }
      status
      submittedAt
      startupIdea
      teamSize
      currentPhase
      fundingRaised
      businessModel
      targetMarket
      competitiveAdvantage
      reviewedBy
      reviewedAt
      reviewNotes
      rejectionReason
      createdAt
      updatedAt
    }
  }
`;

export const GET_INVESTOR_APPLICATION = `
  query GetInvestorApplication($id: ID!) {
    getInvestorApplication(id: $id) {
      id
      userId
      user {
        id
        firstName
        lastName
        email
      }
      status
      submittedAt
      company
      position
      investmentFocus
      portfolioSize
      website
      linkedinProfile
      reviewedBy
      reviewedAt
      reviewNotes
      rejectionReason
      createdAt
      updatedAt
    }
  }
`;

export const GET_MENTOR_APPLICATION_DETAILS = `
  query GetMentorApplication($id: ID!) {
    getMentorApplication(id: $id) {
      id
      userId
      user {
        id
        firstName
        lastName
        email
      }
      status
      submittedAt
      bio
      expertise
      experience
      education
      certifications
      portfolio
      linkedinProfile
      website
      documents
      reviewedBy
      reviewedAt
      reviewNotes
      rejectionReason
      createdAt
      updatedAt
    }
  }
`;

export const LIST_PENDING_APPLICATIONS = `
  query ListPendingApplications {
    listPendingApplications {
      ksmpApplications {
        items {
          id
          userId
          user {
            id
            firstName
            lastName
            email
          }
          status
          submittedAt
          startupIdea
          teamSize
          currentPhase
          createdAt
        }
      }
      investorApplications {
        items {
          id
          userId
          user {
            id
            firstName
            lastName
            email
          }
          status
          submittedAt
          company
          position
          investmentFocus
          createdAt
        }
      }
      mentorApplications {
        items {
          id
          userId
          user {
            id
            firstName
            lastName
            email
          }
          status
          submittedAt
          bio
          expertise
          createdAt
        }
      }
    }
  }
`;

// Degree Program Queries
export const getDegreeProgram = `
  query GetDegreeProgram($id: ID!) {
    getDegreeProgram(id: $id) {
      id
      name
      specialization
      duration
      mode
      schedule
      description
      features
      advantages
      eligibility
      targetAudience
      registrationLink
      image
      status
      totalStudents
      revenue
      createdAt
      updatedAt
      _version
      _deleted
      _lastChangedAt
      __typename
    }
  }
`;

export const listDegreePrograms = `
  query ListDegreePrograms(
    $filter: ModelDegreeProgramFilterInput
    $limit: Int
    $nextToken: String
  ) {
    listDegreePrograms(filter: $filter, limit: $limit, nextToken: $nextToken) {
      items {
        id
        name
        specialization
        duration
        mode
        schedule
        description
        features
        advantages
        eligibility
        targetAudience
        registrationLink
        image
        status
        totalStudents
        revenue
        createdAt
        updatedAt
        _version
        _deleted
        _lastChangedAt
        __typename
      }
      nextToken
      startedAt
      __typename
    }
  }
`;

// Video-related queries
export const GET_PROCESSING_STATUS = `
  query GetProcessingStatus($lessonId: ID!) {
    getProcessingStatus(lessonId: $lessonId) {
      status
      progress
      error
      jobId
      createdAt
      updatedAt
    }
  }
`;

export const GET_VIDEO_MANIFEST_URL = `
  query GetVideoManifestUrl($lessonId: ID!) {
    getVideoManifestUrl(lessonId: $lessonId) {
      url
      expiresAt
      qualities {
        quality
        bitrate
        url
      }
    }
  }
`;

export const GET_VIDEO_QUALITIES = `
  query GetVideoQualities($lessonId: ID!) {
    getVideoQualities(lessonId: $lessonId) {
      qualities {
        quality
        bitrate
        url
        resolution
        codec
      }
    }
  }
`;

export const GET_SIGNED_VIDEO_URL = `
  query GetSignedVideoUrl($lessonId: ID!) {
    getSignedVideoUrl(lessonId: $lessonId) {
      url
      expiresAt
    }
  }
`;

export const GET_VIDEO_PROGRESS = `
  query GetVideoProgress($lessonId: ID!, $userId: ID!) {
    getVideoProgress(lessonId: $lessonId, userId: $userId) {
      lessonId
      lastPosition
      duration
      percentWatched
      completed
      timeSpent
      device
      sessionId
      createdAt
      updatedAt
    }
  }
`;

export const GET_VIDEO_ANALYTICS = `
  query GetVideoAnalytics($lessonId: ID!) {
    getVideoAnalytics(lessonId: $lessonId) {
      lessonId
      totalViews
      averageWatchTime
      completionRate
      dropOffPoints
      engagementScore
      createdAt
      updatedAt
    }
  }
`;

export const GET_INTERACTIVE_TIMELINE = `
  query GetInteractiveTimeline($lessonId: ID!) {
    getInteractiveTimeline(lessonId: $lessonId) {
      lessonId
      elements {
        id
        type
        timestamp
        duration
        content
        responses
      }
      version
      lastUpdated
    }
  }
`;

// ===========================================
// MISSING QUERIES - PHASE 1 FIXES
// ===========================================

// Transcript Service Queries
export const GET_TRANSCRIPT = `
  query GetTranscript($studentId: ID!) {
    getTranscript(studentId: $studentId) {
      id
      studentId
      transcriptUrl
      generatedAt
      createdAt
      updatedAt
    }
  }
`;

export const LIST_TRANSCRIPTS = `
  query ListTranscripts($studentId: ID!, $limit: Int, $nextToken: String) {
    listTranscripts(studentId: $studentId, limit: $limit, nextToken: $nextToken) {
      items {
        id
        studentId
        transcriptUrl
        generatedAt
        createdAt
        updatedAt
      }
      nextToken
    }
  }
`;

// Notes Service Queries
export const GET_NOTES_BY_LESSON = `
  query GetNotesByLesson($lessonId: ID!, $studentId: ID!) {
    getNotesByLesson(lessonId: $lessonId, studentId: $studentId) {
      id
      studentId
      lessonId
      content
      timestamp
      createdAt
      updatedAt
    }
  }
`;

export const LIST_NOTES = `
  query ListNotes($studentId: ID!, $limit: Int, $nextToken: String) {
    listNotes(studentId: $studentId, limit: $limit, nextToken: $nextToken) {
      items {
        id
        studentId
        lessonId
        content
        timestamp
        createdAt
        updatedAt
      }
      nextToken
    }
  }
`;

// Q&A Service Queries
export const GET_QUESTIONS_BY_LESSON = `
  query GetQuestionsByLesson($lessonId: ID!) {
    getQuestionsByLesson(lessonId: $lessonId) {
      id
      studentId
      lessonId
      question
      status
      answers {
        id
        questionId
        mentorId
        answer
        createdAt
        updatedAt
      }
      createdAt
      updatedAt
    }
  }
`;

export const GET_QUESTIONS_BY_STUDENT = `
  query GetQuestionsByStudent($studentId: ID!) {
    getQuestionsByStudent(studentId: $studentId) {
      id
      studentId
      lessonId
      question
      status
      answers {
        id
        questionId
        mentorId
        answer
        createdAt
        updatedAt
      }
      createdAt
      updatedAt
    }
  }
`;

export const GET_PENDING_QUESTIONS = `
  query GetPendingQuestions($mentorId: ID!) {
    getPendingQuestions(mentorId: $mentorId) {
      id
      studentId
      lessonId
      question
      status
      createdAt
      updatedAt
    }
  }
`;

// Profile Service Queries
export const GET_USER_PROFILE = `
  query GetUserProfile($userId: ID!) {
    getUserProfile(userId: $userId) {
      id
      email
      firstName
      lastName
      profilePicture
      bio
      createdAt
      updatedAt
    }
  }
`;

export const GET_STUDENT_PROFILE = `
  query GetStudentProfile($userId: ID!) {
    getStudentProfile(userId: $userId) {
      id
      userId
      bio
      interests
      goals
      currentPhase
      education
      experience
      skills
      totalCoursesCompleted
      totalHoursWatched
      averageGrade
      createdAt
      updatedAt
    }
  }
`;

export const GET_MENTOR_PROFILE = `
  query GetMentorProfile($userId: ID!) {
    getMentorProfile(userId: $userId) {
      id
      userId
      bio
      expertise
      experience
      education
      certifications
      portfolio
      linkedinProfile
      website
      assignedPhases
      maxStudentsPerPhase
      status
      createdAt
      updatedAt
    }
  }
`;

// Application Service Queries
export const GET_APPLICATIONS_BY_TYPE = `
  query GetApplicationsByType($applicationType: ApplicationType!) {
    getApplicationsByType(applicationType: $applicationType) {
      id
      applicantId
      applicationType
      status
      data
      submittedAt
      reviewedAt
      createdAt
      updatedAt
    }
  }
`;

export const GET_PENDING_APPLICATIONS = `
  query GetPendingApplications {
    getPendingApplications {
      id
      applicantId
      applicationType
      status
      data
      submittedAt
      createdAt
      updatedAt
    }
  }
`;

// Analytics Service Queries
export const GET_ANALYTICS_BY_USER = `
  query GetAnalyticsByUser($userId: ID!, $limit: Int, $nextToken: String) {
    getAnalyticsByUser(userId: $userId, limit: $limit, nextToken: $nextToken) {
      items {
        id
        userId
        eventType
        eventData
        timestamp
        createdAt
        updatedAt
      }
      nextToken
    }
  }
`;
